name: Deploy

env:
  NODE_VERSION: "18.x"
  GO_VERSION: "1.20.3"
  PYTHON_VERSION: "3.11"
  ZIG_VERSION: "0.9.1"

on:
  workflow_call:
    inputs:
      stage:
        description: The stage (environment) of the deployment
        required: true
        type: string
      region:
        description: The region to deploy to
        required: true
        type: string
        default: us-west-2
      engine-ref:
        description: the ref (branch, tag or SHA) of the engine to build
        required: false
        type: string
        default: main
  workflow_dispatch:
    inputs:
      stage:
        description: The stage (environment) of the deployment
        required: true
        type: environment
      region:
        description: The region to deploy to
        required: true
        type: string
        default: us-west-2
      engine-ref:
        required: false
        type: string
        default: main

concurrency:
  group: ci-${{ inputs.stage }}-${{ inputs.region }}

jobs:

  build-binaries:
    name: Build Binaries (engine, iac)
    uses: ./.github/workflows/build_binaries.yaml
    with:
      klotho-ref: ${{ inputs.engine-ref }}
    secrets: inherit

  deploy:
    needs:
      - build-binaries
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pipenv
        run: pip install pipenv
      - name: export requirements.txt
        run: pipenv requirements > requirements.txt     
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ inputs.region }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Pulumi Refresh
        uses: pulumi/actions@v4
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ""
          AWS_REGION: ${{ inputs.region }}
          STAGE: ${{ inputs.stage }}
        with:
          command: refresh
          work-dir: "./compiled"
          stack-name: "infracopilot-${{ inputs.stage }}-${{ inputs.region }}"
          upsert: true
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: npm install
        run: npm install
        working-directory: ./deploy
      - name: pulumi - up
        uses: pulumi/actions@v4
        with:
          command: up
          work-dir: "./deploy"
          stack-name: "infracopilot-${{ inputs.stage }}-${{ inputs.region }}"
          upsert: true
          config-map: |
            {
              aws:region: { value: "${{ inputs.region }}", secret: false },
              infracopilot:ifcporm_username: { value: "${{ secrets.INFRACOPILOT_STORAGE_USERNAME }}", secret: true },
              infracopilot:ifcporm_password: { value: "${{ secrets.INFRACOPILOT_STORAGE_PASSWORD }}", secret: true }
            }
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ""
          AWS_REGION: ${{ inputs.region }}
          STAGE: ${{ inputs.stage }}
      - name: Get Pulumi Outputs
        id: pulumi-outputs
        run: |
          echo "::set-output name=ifcp_binary_storage_BucketName::$(pulumi stack output ifcp_binary_storage_BucketName)"
          echo "::set-output name=ifcp_static_site_BucketName::$(pulumi stack output ifcp_static_site_BucketName)"
        working-directory: ./deploy
        shell: bash
      - name: build frontend
        run: |
          make install-frontend
          make build-frontend-${STAGE}
        env:
          CI: false
          NODE_OPTIONS: "--max-old-space-size=4096"
          STAGE: ${{ inputs.stage }}
      - name: Upload frontend to S3
        run: |
          aws s3 sync frontend/build/ s3://${{ steps.pulumi-outputs.outputs.ifcp_static_site_BucketName }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ inputs.region }}
      - name: Download Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries
          path: binaries
      - name: Upload Binaries
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: ${{ steps.pulumi-outputs.outputs.ifcp_static_site_BucketName }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ inputs.region }}
          SOURCE_DIR: 'binaries'
          DEST_DIR: 'binaries'
      - name: Upload Secrets
        env:
          FGA_SECRET_KEY: "${{ secrets.FGA_SECRET_KEY }}"
          FGA_CLIENT_ID: "${{ secrets.FGA_CLIENT_ID }}"
          FGA_STORE_ID: "${{ secrets.FGA_STORE_ID }}"
          FGA_AUTHORIZATION_MODEL_ID: "${{ secrets.FGA_AUTHORIZATION_MODEL_ID }}"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ inputs.region }}
        run: |
          aws secretsmanager put-secret-value --secret-id ifcp-fga-secret --secret-string "${FGA_SECRET_KEY}"
          aws secretsmanager put-secret-value --secret-id ifcp-fga-client-id --secret-string "${FGA_CLIENT_ID}"
          aws secretsmanager put-secret-value --secret-id ifcp-fga-store-id --secret-string "${FGA_STORE_ID}"
          aws secretsmanager put-secret-value --secret-id ifcp-fga-model-id --secret-string "${FGA_AUTHORIZATION_MODEL_ID}"
      - name: pulumi - up
        uses: pulumi/actions@v4
        with:
          command: up
          work-dir: "./deploy"
          stack-name: "infracopilot-${{ inputs.stage }}-${{ inputs.region }}"
          upsert: true
          config-map: |
            {
              aws:region: { value: "${{ inputs.region }}", secret: false },
              infracopilot:ifcporm_username: { value: "${{ secrets.INFRACOPILOT_STORAGE_USERNAME }}", secret: true },
              infracopilot:ifcporm_password: { value: "${{ secrets.INFRACOPILOT_STORAGE_PASSWORD }}", secret: true }
            }
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ""
          AWS_REGION: ${{ inputs.region }}
          STAGE: ${{ inputs.stage }}